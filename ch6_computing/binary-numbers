# Binary Numbers

Binary numbers are just "base 2" numbers. They work the same way as "normal" base 10 numbers, but with two symbols instead of ten.

    Base-2 (binary) symbols: 0 and 1
    Base-10 (decimal) symbols: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9

Each 1 in a binary number represents an ever-greater multiple of 2. In a 4-digit number, that means you have the eights place, the fours place, the twos place, and the ones place. Similar to how in decimal you would have the thousands place, the hundreds place, the tens place, and the ones place.

![binary numbers](/ch6/binaryNumbers.png)

    0001 = 1
    0010 = 2
    0011 = 3
    0100 = 4
    0101 = 5
    0110 = 6
    0111 = 7
    1000 = 8
    1001 = 9
    1010 = 10
    1011 = 11
    1100 = 12
    1101 = 13
    1110 = 14
    1111 = 15

What does the binary number 1100 represent in decimal?
- 12

Binary 1101 is equivalent to which number in decimal?
- 13

What's the largest number you can store in 5 digits of binary?
- print(0b11111)
- 31

print(0b0001)
Prints 1
print(0b0101)
Prints 5

# notes:
    Decimal  Base10  |   Binary/Base2  Base4  Base8   Base16  Base32   Base 64    Base128
    0          10             0         100    1000   10000   100000   1000000   10000000
    1                         1         101    1001         
    2                         10        110    1010
    3                         11        111    1011
    4                                          1100
    5                                          1101
    .                                          1110
    .                                          1111
    .
    9

# In Decimal 
    when we must go past 9, to 10.
    to do this, we create the base 10 place, with 1 being in the tenths place and 0 in the ones place -> 10
        ex: 37 ->   3 * 10 = 30 + 
                    7 * 1 = 7 +  
                    = 37
        // 3 times in the 10s place
        // 7 times in the 1s place

    If we go past 99 to 100? We create the hundredths place, with 1 being in the hundredths place, 0 in the tenths place, 1 in the ones place.
        ex: 266 -> 
                2 * 100 = 200 + 
                6 * 10 = 60 + 
                6 * 1 = 6 
                = 266
        // 2 times in the 100s place
        // 6 times in the 10s place
        // 6 times in the 1s place

# In Binary 
    when we must go past 2, to 3.
    to do this, we create the base 2 place, with 1 being in the twos place, and 0 being the ones place ->  ex: counting in binary
            0     // 0
            1     // 1
            1 0   // 2
            1 1   // 3
    process of getting the number 3 in binary
    -> ex: 3
        2 * 1 = 2 +
        1 * 1 = 1
        = 3
        // 1 time in the twos place
        // 1 time in the ones place
    if we go to number 4, we add tp the fours place -> 1 0 0
    -> ex: 4
        4 * 1 +
        2 * 0 +
        1 * 0
        = 4
        // 1 time in the fours place
        // 0 time in the twos place
        // 0 time in the ones place
    if we go to number 5, we add to the ones place -> 1 0 1
    -> ex: 5
        4 * 1 +
        2 * 0 +
        1 * 1
        = 5
        // 1 time in the fours place
        // 0 time in the twos place
        // 1 time in the ones place
    if we go to number 6, we add to the twos place -> 1 1 0
    -> ex: 6
        4 * 1 +
        2 * 1 +
        1 * 0
        = 6
        // 1 time in the fours place
        // 1 time in the twos place
        // 0 time in the ones place
        
    -> ex: 7  -> 1 1 1
        4 * 1 +
        2 * 1 +
        1 * 1
        = 7
        // 1 time in the fours place
        // 1 time in the twos place
        // 1 time in the ones place
    if we go to number 8, we add an eighths place -> 1 0 0 0
    -> ex: 8
        8 * 1 +
        4 * 0 +
        2 * 0 +
        1 * 0
        = 8
        // 1 time in the eighths place
        // 0 time in the fours place
        // 0 time in the twos place
        // 0 time in the ones place
    -> ex: 9 -> 1 0 0 1
        8 * 1 +
        4 * 0 +
        2 * 0 +
        1 * 1
        = 9
        // 1 time in the eighths place
        // 0 time in the fours place
        // 0 time in the twos place
        // 1 time in the ones place
    -> ex: 10 -> 1 0 1 0
        8 * 1 +
        4 * 0 +
        2 * 1 +
        1 * 0
        = 10
        // 1 time in the eighths place
        // 0 time in the fours place
        // 1 time in the twos place
        // 0 time in the ones place
    -> ex: 11 -> 1 0 1 1 
        8 * 1 +
        4 * 0 +
        2 * 1 +
        1 * 1
        = 11
        // 1 time in the eighths place
        // 0 time in the fours place
        // 1 time in the twos place
        // 1 time in the ones place
    -> ex: 12 -> 1 1 0 0
        8 * 1 +
        4 * 1 +
        2 * 0 +
        1 * 0
        = 12
        // 1 time in the eighths place
        // 1 time in the fours place
        // 0 time in the twos place
        // 0 time in the ones place
    -> ex: 13 -> 1 1 0 1
        8 * 1 +
        4 * 1 +
        2 * 0 +
        1 * 1
        = 9
        // 1 time in the eighths place
        // 1 time in the fours place
        // 0 time in the twos place
        // 1 time in the ones place
    -> ex: 14 -> 1 1 1 0
        8 * 1 +
        4 * 1 +
        2 * 1 +
        1 * 0
        = 14
        // 1 time in the eighths place
        // 1 time in the fours place
        // 1 time in the twos place
        // 0 time in the ones place
    -> ex: 15 -> 1 1 1 1
        8 * 1 +
        4 * 1 +
        2 * 1 +
        1 * 1
        = 15
        // 1 time in the eighths place
        // 1 time in the fours place
        // 1 time in the twos place
        // 1 time in the ones place
